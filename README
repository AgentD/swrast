
  About
  *****

 To whom it may concern: this directory contains a just-for-fun software
 rasterizer written in C89, started on a boring holiday week when I was sick.

 The entire source code is released into the public domain.

 The rasterizer currently supports the following features:
  - Subpixel correct triangle rasterization
  - Configurable back face culling (cull by vertex winding)
  - Vertex buffers and index buffers
  - Fixed function OpenGL(R) style transform & lighting with model view &
    projection matrix and up to 8 independend light sources
  - Gouraud shading
  - Perspective correct interpolation of vertex attributes
  - Multpile texture layers with nearest neighbour sampling
  - Depth buffering (OpenGL(R) style comparison function)
  - Alpha blending
  - Multiple framebuffer objects (can be used for e.g. render to texture)
  - viewport mapping


  Rendering Pipeline
  ******************

     _________________
    | Input Assembler |     Vertices are decoded from vertex and index
    |_________________|     buffers.
           _| |_
     ______\___/______
    |Transform & Light|     Vertices are transformed with modelview and
    |_________________|     projection matrix. Lighting values for each
           _| |_            vertex are computed in viewspace.
     ______\___/______
    |  Rasterization  |     Pixels are generated from tripples of vertices.
    |_________________|     Vertex attributes are interpolated over the
           _| |_            triangle area.
     ______\___/______
    |    Depth test   |     The interolated depth value is compared to the
    |_________________|     depth buffer value. Pixels are dropped if the
           _| |_            specified comparison opartation returns false.
     ______\___/______
    |    Texturing    |     Texture color values are fetched and multiplied
    |_________________|     to the pixel color values.
           _| |_
     ______\___/______
    |   Framebuffer   |     The pixel color is alpha blended onto framebuffer.
    |     blending    |
    |_________________|

 Lighting, texturing, depth test and blending can be turned on and off or
 configured.


  Source code overview
  ********************

    include/config.h          - Preprocessor defined limits of the
                                rasterization pipeline

    include/predef.h          - Forward declarations of structures

    include/context.h         - Context structure. Encapsulates all global
    src/context.c               state of the pipeline.

    include/inputassembler.h  - Implementation of the input assembler stage
    src/inputassembler.c

    include/tl.h              - Implementation of the T&L stage
    src/tl.c

    include/rasterizer.h      - Implementation of the rasterizer stage and
    src/rasterizer.c            pixel merging (depth test, texturing
                                and blending)

    include/texture.h         - Implementation of texture objects
    src/texture.c

    include/framebuffer.h     - Implementation of framebuffer objects
    src/framebuffer.c

    test/window.h             - A simple Xlib based window implementation for
    test/window.c               testing. Handles a window and
                                blits a framebuffer

    test/3ds.h                - A quick & dirty 3ds loader for testing
    test/3ds.c

    test/test.c               - A small test program


  Compiling
  *********

 Simply type "make" into the commandline. The resulting "a.out" binary
 contains a small test program that renders to an X11 window. All object
 files are neatly packed away into a directory called "obj/".

 Type "make clean" to cleanup the directory tree.


  License
  *******

 All source code in this directory is released into the public domain.
 I, David Oberhollenzer, will not assert any copyright claims on the
 documents in this directory.

